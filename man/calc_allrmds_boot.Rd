% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/resmeans.R
\name{calc_allrmds_boot}
\alias{calc_allrmds_boot}
\title{Wrapper to enable bootstrap sampling of restricted mean durations for each health state and all three models.}
\usage{
calc_allrmds_boot(
  ptdata,
  inclset = 0,
  dpam,
  cuttime = 0,
  Ty = 10,
  lifetable = NA,
  discrate = 0
)
}
\arguments{
\item{ptdata}{Dataset of patient level data. Must be a tibble with columns named:
\itemize{
\item ptid: patient identifier
\item pfs.durn: duration of PFS from baseline
\item pfs.flag: event flag for PFS (=1 if progression or death occurred, 0 for censoring)
\item os.durn: duration of OS from baseline
\item os.flag: event flag for OS (=1 if death occurred, 0 for censoring)
\item ttp.durn: duration of TTP from baseline (usually should be equal to pfs.durn)
\item ttp.flag: event flag for TTP (=1 if progression occurred, 0 for censoring).
}}

\item{inclset}{Vector to indicate which patients to include in analysis}

\item{dpam}{List of statistical fits to each endpoint required in PSM, STM-CF and STM-CR models.}

\item{cuttime}{Time cutoff - this is nonzero for two-piece models.}

\item{Ty}{Time duration over which to calculate. Assumes input is in years, and patient-level data is recorded in weeks.}

\item{lifetable}{Optional, a life table. Columns must include \code{lttime} (time in years, or 52.18 times shorter than the time index elsewhere, starting from zero) and \code{lx}}

\item{discrate}{Discount rate (\% per year)}
}
\value{
Numeric vector of restricted mean durations - PF for each model (PSM, STM-CF, STM-CR), then PD, then OS.
}
\description{
Wrapper function to \link{calc_allrmds} to enable bootstrap sampling of calculations of restricted mean durations for each health state (progression free and progressed disease) for all three models (partitioned survival, clock forward state transition model, clock reset state transition model).
}
\examples{
bosonc <- create_dummydata("flexbosms")
fits <- fit_ends_mods_spl(bosonc)
# Pick out best distribution according to min AIC
params <- list(
  ppd = find_bestfit_spl(fits$ppd, "aic")$fit,
  ttp = find_bestfit_spl(fits$ttp, "aic")$fit,
  pfs = find_bestfit_spl(fits$pfs, "aic")$fit,
  os = find_bestfit_spl(fits$os, "aic")$fit,
  pps_cf = find_bestfit_spl(fits$pps_cf, "aic")$fit,
  pps_cr = find_bestfit_spl(fits$pps_cr, "aic")$fit
)
calc_allrmds_boot(ptdata=bosonc, dpam=params)
}
